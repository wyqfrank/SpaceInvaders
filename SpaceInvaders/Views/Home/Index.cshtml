<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>SignalR Groups Example</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.9/signalr.min.js"></script>
    <style>
    </style>
</head>
<body>
    <input type="name" value="enter name" id="input">
    <input type="party id" value="enter party id" id="party">
    <input type="button" value="Join server" id="submit">
    <div class="container">
        <h1 class="display-4">Space Invaders</h1>
        <canvas id="drawingCanvas"></canvas>
    </div>

    <script>
        
        const keys = {
            w: false,
            a: false,
            s: false,
            d: false
        };
        

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/connect")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start().then(function () {
            console.log("SignalR Connected.");
        }).catch(function (err) {
            return console.error(err.toString());
        });

        const canvas = document.getElementById("drawingCanvas");
        const context = canvas.getContext('2d');
        const players = {}
        

        
        
        connection.on("RecieveData", function(backendPlayers){
            const data = JSON.parse(backendPlayers);
            console.log(data);
            for(const id in data)
            {
                const backendPlayer = data[id];
                if (!players[id]) {
                    players[id] = new Player(backendPlayer.x, backendPlayer.y, id, "#00FF00")
                }
                else
                {
                    players[id].x = backendPlayer.x;
                    players[id].y = backendPlayer.y;
                }
            }

            console.log(players);
        })

        connection.on("PlayerConnected", (width, height) => {
            canvas.width = window.innerWidth;
            canvas.height = window.innerHeight;
            context.fillStyle = "#FFFFFF";
            context.fillRect(0, 0, canvas.width,canvas.height);
        });   

       // Event listener for keydown events
        window.addEventListener('keydown', (event) => {
            console.log(event.key)
            if (event.key in keys) {
                keys[event.key] = true;
                // Example: Check for diagonal movement
                if (keys.w && keys.d) {
                    
                    connection.invoke("HandleInput", "wd")
                } else if (keys.w && keys.a) {
                    connection.invoke("HandleInput", "wa")

                } else if (keys.s && keys.d) {
                    connection.invoke("HandleInput", "sd")

                } else if (keys.s && keys.a) {
                    connection.invoke("HandleInput", "sa")

                } else if (keys.w) {
                    connection.invoke("HandleInput", "w")

                } else if (keys.s) {
                    connection.invoke("HandleInput", "s")

                } else if (keys.d) {
                    connection.invoke("HandleInput", "d")

                } else if (keys.a) {
                    connection.invoke("HandleInput", "a")

                }
            }
        });

        window.addEventListener('keyup', (event) => {
            if (event.key in keys) {
                keys[event.key] = false;
            }
        });
        
        function gameloop()
        {
            context.clearRect(0, 0, canvas.width, canvas.height)
            for (const id in players) 
            {
                const frontEndPlayer = players[id];
                frontEndPlayer.draw();
            }
            requestAnimationFrame(gameloop);
        }
        requestAnimationFrame(gameloop);

        class Player
        {
            constructor(x, y, connectionId, color)
            {
                this.x = x;
                this.y = y;
                this.connectionId = connectionId;
                this.color = color;
                this.radius = 10;
            }
            draw() {
                context.shadowColor = this.color
                context.shadowBlur = 20
                context.beginPath()
                context.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false)
                context.fillStyle = this.color
                context.fill()
                context.restore()
            }
        }
    
    </script>
</body>
</html>

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>SignalR Groups Example</title>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.9/signalr.min.js"></script>
    <style>
        body, html {
            margin: 0;
            padding: 0;
            overflow: hidden;
            align-items: center;
            text-align: center;
        }

        canvas {
            display: block;
            border: 2px solid black;
            background-color: black;
        }

        .container {
            display: flex;
            flex-direction: column;
            align-items: center;
        }
    </style>
</head>
<body>
    <input type="text" placeholder="enter name" id="input">
    <input type="text" placeholder="enter party id" id="party">
    <input type="button" value="Join server" id="submit">
    <div class="container">
        <h1 class="display-4">Space Invaders</h1>
        <canvas id="drawingCanvas"></canvas>
    </div>

    <script>
        const keys = {
            w: false,
            a: false,
            s: false,
            d: false
        };

        const connection = new signalR.HubConnectionBuilder()
            .withUrl("/connect")
            .configureLogging(signalR.LogLevel.Information)
            .build();

        connection.start().then(function () {
            console.log("SignalR Connected.");
        }).catch(function (err) {
            return console.error(err.toString());
        });

        

        const canvas = document.getElementById("drawingCanvas");
        const context = canvas.getContext('2d');
        const players = {};
        const mobs = {};
        let bullets = []

        connection.on("RecieveData", function (backendPlayers) {
            const data = JSON.parse(backendPlayers);
            for (const id in data) {
                const backendPlayer = data[id];
                if (!players[id]) {
                    players[id] = new Player(backendPlayer.x, backendPlayer.y, id, "#00FF00")
                }
                else {
                    players[id].x = backendPlayer.x;
                    players[id].y = backendPlayer.y;
                }
            }
        });

        connection.on("GlobalUpdate", function (backendMobs, backendBullets) {
            const data = JSON.parse(backendMobs);
            const bulletData = JSON.parse(backendBullets);


            const newBulletArray = [];
            for(let i = 0; i < bulletData.length; i++)
            {
                const backendBullet = bulletData[i];
                newBulletArray[i] = new Bullet(backendBullet.x, backendBullet.y, backendBullet.Id);
            }
            
            for (const id in data) {
                const backendMob = data[id];
                if (!mobs[id]) {
                    mobs[id] = new Mob(backendMob.x, backendMob.y, id, "#FF0000")
                }
                else {
                    mobs[id].x = backendMob.x;
                    mobs[id].y = backendMob.y;
                }
            }
            
            bullets = newBulletArray;

            console.log(bullets);
        });

        connection.on("PlayerConnected", (width, height) => {
            canvas.width = 500; // InnerWidth 
            canvas.height = 500;// InnerHeight
            context.fillStyle = "#FFFFFF";
            context.fillRect(0, 0, canvas.width, canvas.height);
        });

        window.addEventListener('keydown', (event) => {
            console.log(event.key)
            if (event.key in keys) {
                keys[event.key] = true;
                if (keys.w && keys.d) {
                    connection.invoke("HandleInput", "wd");
                } else if (keys.w && keys.a) {
                    connection.invoke("HandleInput", "wa");
                } else if (keys.s && keys.d) {
                    connection.invoke("HandleInput", "sd");
                } else if (keys.s && keys.a) {
                    connection.invoke("HandleInput", "sa");
                } else if (keys.w) {
                    connection.invoke("HandleInput", "w");
                } else if (keys.s) {
                    connection.invoke("HandleInput", "s");
                } else if (keys.d) {
                    connection.invoke("HandleInput", "d");
                } else if (keys.a) {
                    connection.invoke("HandleInput", "a");
                }
            }
        });

        window.addEventListener('keyup', (event) => {
            if (event.key in keys) {
                keys[event.key] = false;
            }
        });

        window.addEventListener('keypress', (event) => {
            if (event.key == " ") {
                connection.invoke("Shoot");
            }
        });

        function gameloop() {
            context.clearRect(0, 0, canvas.width, canvas.height)

            for(let i = 0; i < bullets.length; i++)
            {
                bullets[i].draw();
            }

            for (const id in players) {
                const frontEndPlayer = players[id];
                frontEndPlayer.draw();
            }

            for (const id in mobs) {
                const mob = mobs[id];
                mob.draw();
            }

            requestAnimationFrame(gameloop);
        }
        requestAnimationFrame(gameloop);

        class Bullet {
            constructor(x, y, id)
            {
                this.x = x;
                this.y = y;
                this.id = id;
            }

            draw()
            {
                context.fillStyle = "#FFFFFF";
                context.fillRect(this.x, this.y, 2, 10);
            }
        }


        class Mob {
            constructor(x, y, Id, colour) {
                this.x = x;
                this.y = y;
                this.Id = Id;
                this.colour = colour;
                this.side = 30;
            }
            draw() {
                context.beginPath();
                context.fillStyle = this.colour;
                context.fillRect(this.x, this.y, this.side, this.side);
                context.closePath();
            }
        }

        class Player {
            constructor(x, y, connectionId, colour) {
                this.x = x;
                this.y = y;
                this.connectionId = connectionId;
                this.colour = colour;
                this.radius = 10;
            }
            draw() {
                context.beginPath();
                context.shadowBlur = 20;
                context.arc(this.x, this.y, this.radius, 0, Math.PI * 2, false);
                context.fillStyle = this.colour;
                context.fill();
                context.closePath();
            }
        }
    </script>
</body>
</html>
